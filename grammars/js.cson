# TODO: s/ECMA/Java/ once finished
name: "ECMAScript"
scopeName: "source.ecmascript"
fileTypes: [
	"js", "_js"
	"es", "es5", "es6"
	"bones"
	"frag"
	"gs"
	"htc"
	"jake"
	"jsb"
	"jscad"
	"jscript"
	"jse"
	"jsfl"
	"jslib"
	"jsm"
	"json5"
	"jspre"
	"jss"
	"mjs"
	"njs"
	"pac"
	"pjs"
	"sjs"
	"ssjs"
	"snap"
	"xsjs"
	"xsjslib"
	"Jakefile"
]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*(?:\\s|\\/|(?<=!)\\b)
		(?:node|iojs|JavaScript|v8|d8)
	(?:$|\\s)
	|
	# Modeline
	(?i:
		# Emacs
		-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
			(?:js|javascript)
		(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
		|
		# Vim
		(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
			javascript
		(?=\\s|:|$)
	)
"""
patterns: [
	# Interpreter directive
	name:  "comment.line.number-sign.hashbang.source.js"
	begin: "\\A#!"
	end:   "$"
	beginCaptures:
		0: name: "punctuation.definition.comment.source.js"
	
	# Remainder of grammar
	{include: "#main"}
]

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#module"}
			{include: "#strings"}
			{include: "#templates"}
			{include: "#punctuation"}
		]
	
	
	comments:
		patterns: [
			{include: "#comments.line"}
			{include: "#comments.doc"}
			{include: "#comments.block"}
		]
	
	"comments.block":
		patterns: [{
			name: "comment.block.empty.source.js"
			match: "(/\\*)(\\*/)"
			captures:
				1: name: "punctuation.definition.comment.begin.js"
				2: name: "punctuation.definition.comment.end.js"
		},{
			name: "comment.block.source.js"
			begin: "/\\*"
			end:   "\\*/"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.js"
			endCaptures:   0: name: "punctuation.definition.comment.end.js"
		}]

	# /** Doc-block (JSDoc and derivative formats) */
	"comments.doc":
		name: "comment.block.documentation.source.js"
		begin: "/\\*\\*(?!/)"
		end:   "\\*/"
		beginCaptures: 0: name: "punctuation.definition.comment.begin.js"
		endCaptures:   0: name: "punctuation.definition.comment.end.js"
		# patterns: [include: "source.jsdoc"] TODO

	# // Line comment
	"comments.line":
		name: "comment.line.double-slash.source.js"
		begin: "//"
		end:   "\\s*$\\s*"
		beginCaptures:
			0: name: "punctuation.definition.comment.js"
	
	
	# Escape sequences used within strings and templates (TODO: Fill these out)
	escapes:
		patterns: [{
			name: "constant.character.escape.source.js"
			match: "(\\\\)."
			captures:
				1: name: "punctuation.definition.escape.backslash.source.js"
		}]
	

	# ECMAScript modules
	module:
		patterns: [
			{include: "#module.import.dynamic"}
			{include: "#module.import.static"}
			{include: "#module.import.multiline"}
		]

	"module.innards":
		patterns: [
			{include: "#comments"}
			{include: "#module.namespace"}
			{include: "#module.alias"}
			{include: "#module.specifier"}
			{
				name: "variable.language.default.module.source.js"
				match: "\\b(default)\\b"
			}
			{include: "#strings"}
			{include: "#punctuation"}
		]
	
	# as …
	"module.alias":
		name:  "meta.module.alias.source.js"
		begin: "(?<=\\s|^|\\s|\\G)as(?:\\s+|$\\s*)"
		end:   "[\\w$_]+|(?=[^\\s\\w$_])"
		beginCaptures: 0: name: "keyword.control.module.as.source.js"
		endCaptures:   0: name: "entity.name.module.alias.source.js"
		patterns: [include: "#comments"]

	# { … }
	"module.list":
		name: "meta.module.list.source.js"
		begin: "(?:\\G|^)\\s*({)\\s*"
		end:   "}"
		beginCaptures: 1: name: "punctuation.definition.curly.bracket.brace.begin.source.js"
		endCaptures:   0: name: "punctuation.definition.curly.bracket.brace.end.source.js"
		patterns: [include: "#module.innards"]

	# * …
	"module.namespace":
		name:  "meta.module.namespace.source.js.test-1"
		contentName: "test-2"
		begin: "\\*"
		end:   "(?=from)|(?:^|\\s+)(?!as|from)([\\w$_]+)|(?=[^\\s\\w$_])"
		beginCaptures: 0: name: "keyword.operator.module.namespace.source.js"
		endCaptures:   0: name: "entity.name.module.alias.source.js"
		patterns: [include: "#module.alias"]

	# from …
	"module.specifier":
		begin: "(?<=\\s|}|^)(from)(?=\\s|$)"
		end:   "(?=[^\\s/]|/[^/*])"
		beginCaptures:
			1: name: "keyword.control.module.import.from.source.js"
		patterns: [include: "#comments"]



	# import …
	"module.import.static":
		name:  "meta.module.import.static.source.js"
		begin: "(import)\\s+(?=[^/\\s(])"
		end:   ";|$"
		beginCaptures:
			1: name: "keyword.control.module.import.source.js"
		endCaptures:
			0: name: "punctuation.terminator.statement.semicolon.source.js";
		patterns: [{
			name: "entity.name.module.source.js"
			match: "\\G\\s*([\\w$_]+)"
		},include: "#module.innards"]

	# TODO: import( … )
	"module.import.dynamic":
		name:  "meta.module.import.dynamic.source.js"
		begin: "(import)\\s*(\\()"
		end:   "\\)"
		beginCaptures:
			1: name: "keyword.control.module.import.source.js"
			2: name: "punctuation.definition.arguments.round.bracket.begin.source.js"
		endCaptures:
			0: name: "punctuation.definition.arguments.round.bracket.end.source.js"

	# import ⮐ …
	"module.import.multiline":
		name:  "meta.module.import.source.js"
		begin: "(import)\\s*$\\s*"
		end:   "(?<=[^/\\s])"
		beginCaptures:
			1: name: "keyword.control.module.import.source.js"
		patterns: [
			{include: "#module.list"}
			{include: "#comments"}
			{include: "#module.innards"}
		]


	# Punctuation characters matched in absence of a more specific context
	punctuation:
		patterns: [
			{include: "#punctuation.semicolon"}
			{include: "#punctuation.comma"}
			{include: "#punctuation.brackets"}
		]

	"punctuation.brackets":
		patterns: [
			# We're not enforcing paired matches. What's the point?
			{match: "{",   name: "punctuation.definition.curly.bracket.brace.begin.source.js"}
			{match: "}",   name: "punctuation.definition.curly.bracket.brace.end.source.js"}
			{match: "\\[", name: "punctuation.definition.square.bracket.brace.begin.source.js"}
			{match: "\\]", name: "punctuation.definition.square.bracket.brace.end.source.js"}
			{match: "\\(", name: "punctuation.definition.round.bracket.brace.begin.source.js"}
			{match: "\\)", name: "punctuation.definition.round.bracket.brace.end.source.js"}
		]

	"punctuation.comma":
		name: "punctuation.delimiter.comma.source.js"
		match: ","

	"punctuation.semicolon":
		name: "punctuation.terminator.statement.semicolon.source.js"
		match: ";"
	

	# Quoted string literals
	strings:
		patterns: [
			{include: "#strings.doubleQuoted"}
			{include: "#strings.singleQuoted"}
		]

	# "Double quotes"
	"strings.doubleQuoted":
		patterns: [{
			# Empty string
			name:  "string.quoted.double.empty.source.js"
			match: '(")(")'
			captures:
				1: name: "punctuation.definition.string.begin.source.js"
				2: name: "punctuation.definition.string.end.source.js"
		},{
			# "Not empty. Seriously."
			name:  "string.quoted.double.source.js"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
			patterns: [{
				name: "invalid.illegal.string.unclosed.source.js"
				match: '(?:\\G|^)[^"]*(?<!\\\\)$'
				captures:
					0: patterns: [include: "#escapes"]
			}, include: "#escapes"]
		}]

	# 'Single quotes'
	"strings.singleQuoted":
		patterns: [{
			# Two apostrophes masquerading as a quotation mark
			name:  "string.quoted.single.empty.source.js"
			match: "(')(')"
			captures:
				1: name: "punctuation.definition.string.begin.source.js"
				2: name: "punctuation.definition.string.end.source.js"
		},{
			# 'String literal for lazy-typists'
			name:  "string.quoted.single.source.js"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
			patterns: [{
				name: "invalid.illegal.string.unclosed.source.js"
				match: "(?:\\G|^)[^']*(?<!\\\\)$"
				captures:
					0: patterns: [include: "#escapes"]
			}, include: "#escapes"]
		}]


	# `Template literals` (TODO: Tagging)
	templates:
		patterns: [{
			name:  "string.interpolated.template.source.js"
			begin: "`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
		}]
