# TODO: s/ECMA/Java/ once finished
name: "ECMAScript"
scopeName: "source.ecmascript"
fileTypes: [
	"js", "_js"
	"es", "es5", "es6"
	"bones"
	"frag"
	"gs"
	"htc"
	"jake"
	"jsb"
	"jscad"
	"jscript"
	"jse"
	"jsfl"
	"jslib"
	"jsm"
	"json5"
	"jspre"
	"jss"
	"mjs"
	"njs"
	"pac"
	"pjs"
	"sjs"
	"ssjs"
	"snap"
	"xsjs"
	"xsjslib"
	"Jakefile"
]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*(?:\\s|\\/|(?<=!)\\b)
		(?:node|iojs|JavaScript|v8|d8)
	(?:$|\\s)
	|
	# Modeline
	(?i:
		# Emacs
		-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
			(?:js|javascript)
		(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
		|
		# Vim
		(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
			javascript
		(?=\\s|:|$)
	)
"""
patterns: [
	# Interpreter directive
	name:  "comment.line.number-sign.hashbang.source.js"
	begin: "\\A#!"
	end:   "$"
	beginCaptures:
		0: name: "punctuation.definition.comment.source.js"
	
	# Remainder of grammar
	{include: "#main"}
]

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#binding"}
			{include: "#module"}
			{include: "#expression"}
			{include: "#punctuation"}
		]

	# Hack for begin/end rules which terminate at EOL, but only after something
	# meaningful has been matched (e.g., assignments or constructs subject to ASI)
	skipInitialEmptyLines:
		name:  "meta.initial-empty-lines.js"
		begin: "\\G\\s+$\\s*"
		end:   "^\\s*(?=[^\\s/]|/[^/*]|/$)"
		patterns: [include: "#comments"]


	binding:
		name:  "meta.binding.$3.js"
		begin: "(?:(export)\\s+(?:(default)\\s+)?)?(const|let|var)(?=\\s|$|/[/*])"
		end:   ";|(?<!\\G)$"
		beginCaptures:
			1: name: "keyword.control.module.export.source.js"
			2: name: "keyword.control.module.default.source.js"
			3: name: "storage.type.$3.binding.js"
		endCaptures:
			0: patterns: [include: "#punctuation.semicolon"]
		patterns: [
			{include: "#skipInitialEmptyLines"}
			{include: "#comments"}
			{include: "#binding.assignment"}
			{include: "#binding.multiple"}
		]

	"binding.assignment":
		name:  "meta.binding.assignment.js"
		begin: "\\G\\s*([$\\w]+)"
		end:   "(?=;|,|\\s*$)"
		beginCaptures:
			1: name: "variable.other.assignment.readwrite.js"
		patterns: [
			{include: "#comments"}
			{
				begin: "="
				end:   "(?=;|,|$)"
				beginCaptures:
					0: name: "keyword.operator.assignment.js"
				patterns: [
					{include: "#skipInitialEmptyLines"}
					{include: "#expression"}
				]
			}
		]
	
	"binding.multiple":
		name:  "meta.binding.multiple.js"
		begin: ","
		end:   "(?=[;\\)},])|(?<!\\G)\\s*(?=$)"
		beginCaptures:
			0: patterns: [include: "#punctuation.comma"]
		patterns: [
			{include: "#skipInitialEmptyLines"}
			{include: "#binding.assignment"}
		]
	
	
	comments:
		patterns: [
			{include: "#comments.line"}
			{include: "#comments.doc"}
			{include: "#comments.block"}
		]
	
	"comments.block":
		patterns: [{
			name: "comment.block.empty.source.js"
			match: "(/\\*)(\\*/)"
			captures:
				1: name: "punctuation.definition.comment.begin.js"
				2: name: "punctuation.definition.comment.end.js"
		},{
			name: "comment.block.source.js"
			begin: "/\\*"
			end:   "\\*/"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.js"
			endCaptures:   0: name: "punctuation.definition.comment.end.js"
		}]

	# /** Doc-block (JSDoc and derivative formats) */
	"comments.doc":
		name: "comment.block.documentation.source.js"
		begin: "/\\*\\*(?!/)"
		end:   "\\*/"
		beginCaptures: 0: name: "punctuation.definition.comment.begin.js"
		endCaptures:   0: name: "punctuation.definition.comment.end.js"
		# patterns: [include: "source.jsdoc"] TODO

	# // Line comment
	"comments.line":
		name: "comment.line.double-slash.source.js"
		begin: "//"
		end:   "\\s*$\\s*"
		beginCaptures:
			0: name: "punctuation.definition.comment.js"
	
	
	# Escape sequences used within strings and templates (TODO: Fill these out)
	escapes:
		patterns: [{
			name: "constant.character.escape.source.js"
			match: "(\\\\)."
			captures:
				1: name: "punctuation.definition.escape.backslash.source.js"
		}]


	expression:
		patterns: [
			{include: "#strings"}
			{include: "#templates"}
		]

	module:
		patterns: [
			{include: "#module.import"}
		]
	
	"module.as":
		name:  "meta.module.alias.source.js"
		begin: "\\b(as)\\s*"
		end:   "\\b(default)\\b|([\\w$_]+)|(?=}|,)"
		beginCaptures:
			1: name: "keyword.control.module.as.source.js"
		endCaptures:
			1: name: "variable.language.module.default.source.js"
			2: name: "entity.name.module.alias.source.js"
		patterns: [include: "#comments"]

	"module.from":
		name: "keyword.control.module.from.source.js"
		match: "\\b(from)\\b"

	"module.import":
		name:  "meta.module.$1.source.js"
		begin: "\\b(import|export)(?=\\s|$)"
		end:   """(?x)
			(?=}|\\b(?:import|export)\\b) |
			("(?:[^"\\\\]|\\\\.)*") |
			('(?:[^"\\\\]|\\\\.)*')
		"""
		beginCaptures:
			0: name: "keyword.control.module.$1.source.js"
		endCaptures:
			0: name: "meta.module.import.specifier.source.js"
			1: patterns: [include: "#strings.doubleQuoted"]
			2: patterns: [include: "#strings.singleQuoted"]
		patterns: [
			{include: "#module.list"}
			{include: "#module.from"}
			{include: "#module.name"}
			{include: "#module.namespace"}
			{include: "#punctuation.comma"}
		]

	"module.list":
		name:  "meta.module.list.source.js"
		begin: "\\{"
		end:   "\\}"
		beginCaptures: 0: name: "punctuation.definition.curly.bracket.brace.begin.source.js"
		endCaptures:   0: name: "punctuation.definition.curly.bracket.brace.end.source.js"
		patterns: [
			{include: "#punctuation.comma"}
			{include: "#module.import"}
			{include: "#module.namespace"}
			{include: "#module.from"}
			{include: "#module.name"}
		]
	
	"module.namespace":
		name:  "meta.module.namespace.source.js"
		begin: "\\*"
		end:   "(?<=\\w)(?<!as)\\b|(?=,|})"
		beginCaptures: 0: name: "keyword.operator.module.namespace.source.js"
		endCaptures:   0: name: "entity.name.module.alias.source.js"
		patterns: [
			{include: "#comments"}
			{include: "#module.as"}
		]

	"module.name":
		name: "meta.module.name.source.js"
		begin: "\\b(?:(default)|(?!default|as|from)([\\w$_]+))\\b\\s*"
		end:   "\\b(?!as|from)([\\w$_]+)\\b|(?=[^\\s\\w]|\\bfrom\\b)"
		beginCaptures:
			1: name: "variable.language.module.default.source.js"
			2: name: "entity.name.module.source.js"
		endCaptures:
			1: name: "invalid.illegal.syntax.source.js"
		patterns: [
			{include: "#comments"}
			{include: "#module.as"}
		]


	# Punctuation characters matched in absence of a more specific context
	punctuation:
		patterns: [
			{include: "#punctuation.semicolon"}
			{include: "#punctuation.comma"}
			{include: "#punctuation.brackets"}
		]

	"punctuation.brackets":
		patterns: [
			# We're not enforcing paired matches. What's the point?
			{match: "{",   name: "punctuation.definition.curly.bracket.brace.begin.source.js"}
			{match: "}",   name: "punctuation.definition.curly.bracket.brace.end.source.js"}
			{match: "\\[", name: "punctuation.definition.square.bracket.brace.begin.source.js"}
			{match: "\\]", name: "punctuation.definition.square.bracket.brace.end.source.js"}
			{match: "\\(", name: "punctuation.definition.round.bracket.brace.begin.source.js"}
			{match: "\\)", name: "punctuation.definition.round.bracket.brace.end.source.js"}
		]

	"punctuation.comma":
		name: "punctuation.delimiter.comma.source.js"
		match: ","

	"punctuation.semicolon":
		name: "punctuation.terminator.statement.semicolon.source.js"
		match: ";"
	

	# Quoted string literals
	strings:
		patterns: [
			{include: "#strings.doubleQuoted"}
			{include: "#strings.singleQuoted"}
		]

	# "Double quotes"
	"strings.doubleQuoted":
		patterns: [{
			# Empty string
			name:  "string.quoted.double.empty.source.js"
			match: '(")(")'
			captures:
				1: name: "punctuation.definition.string.begin.source.js"
				2: name: "punctuation.definition.string.end.source.js"
		},{
			# "Not empty. Seriously."
			name:  "string.quoted.double.source.js"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
			patterns: [{
				name: "invalid.illegal.string.unclosed.source.js"
				match: '(?:\\G|^)[^"]*(?<!\\\\)$'
				captures:
					0: patterns: [include: "#escapes"]
			}, include: "#escapes"]
		}]

	# 'Single quotes'
	"strings.singleQuoted":
		patterns: [{
			# Two apostrophes masquerading as a quotation mark
			name:  "string.quoted.single.empty.source.js"
			match: "(')(')"
			captures:
				1: name: "punctuation.definition.string.begin.source.js"
				2: name: "punctuation.definition.string.end.source.js"
		},{
			# 'String literal for lazy-typists'
			name:  "string.quoted.single.source.js"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
			patterns: [{
				name: "invalid.illegal.string.unclosed.source.js"
				match: "(?:\\G|^)[^']*(?<!\\\\)$"
				captures:
					0: patterns: [include: "#escapes"]
			}, include: "#escapes"]
		}]


	# `Template literals` (TODO: Tagging)
	templates:
		patterns: [{
			name:  "string.interpolated.template.source.js"
			begin: "`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.definition.string.begin.source.js"
			endCaptures:   0: name: "punctuation.definition.string.end.source.js"
		}]
